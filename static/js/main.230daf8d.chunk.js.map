{"version":3,"sources":["reducers.js","components/SearchBox.js","components/Scroll.js","components/Card.js","components/CardList.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","robots","isPending","error","SearchBox","_ref","searchfield","searchchange","react_default","a","createElement","className","onChange","type","placeholder","Scroll","props","style","overflowY","height","children","Card","id","name","email","alt","src","concat","fontSize","CardList","robos","map","_ref2","components_Card","key","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","info","setState","Component","App","onFetchRobots","_this$props","onSearchChange","filteredrobots","filter","toLowerCase","includes","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","connect","searchRobots","fetchRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"iOAKMA,EAAqB,CAC1BC,YAAa,IAYRC,EAAqB,CAC1BC,OAAQ,GACRC,WAAW,EACXC,MAAO,uDCROC,EAXC,SAAAC,GAA+BA,EAA7BC,YAA6B,IAAhBC,EAAgBF,EAAhBE,aAC9B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,SACAC,UAAU,kCACVC,SAAUL,EACVM,KAAK,SACLC,YAAY,qBCADC,EARA,SAACC,GACd,OACER,EAAAC,EAAAC,cAAA,OAAKO,MAAO,CAAEC,UAAU,SAAUC,OAAQ,UACvCH,EAAMI,WCSEC,EAXJ,SAAAhB,GAAqB,IAAnBiB,EAAmBjB,EAAnBiB,GAAIC,EAAelB,EAAfkB,KAAMC,EAASnB,EAATmB,MACtB,OACChB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mDACdH,EAAAC,EAAAC,cAAA,OAAKe,IAAK,SAASC,IAAG,wBAAAC,OAA0BL,EAA1B,4BACtBd,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKa,GACLf,EAAAC,EAAAC,cAAA,KAAGO,MAAO,CAACW,SAAS,SAAUJ,MCcpBK,EAnBA,SAAAxB,GAAW,IAATyB,EAASzB,EAATyB,MAChB,OACCtB,EAAAC,EAAAC,cAAA,WAECoB,EAAMC,IAAI,SAAAC,GAAqB,IAAnBV,EAAmBU,EAAnBV,GAAIC,EAAeS,EAAfT,KAAMC,EAASQ,EAATR,MACrB,OACChB,EAAAC,EAAAC,cAACuB,EAAD,CACCC,IAAKZ,EACLA,GAAIA,EACJC,KAAMA,EACNC,MAAOA,QCOEW,cAjBd,SAAAA,EAAYnB,GAAM,IAAAoB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMvB,KACD2B,MAAM,CACVC,UAAU,GAHMR,iFAMAjC,EAAM0C,GACvBN,KAAKO,SAAS,CAACF,UAAU,qCAGzB,OAAIL,KAAKI,MAAMC,SACPpC,EAAAC,EAAAC,cAAA,wBAED6B,KAAKvB,MAAMI,gBAdQ2B,aCsBtBC,qMAGJT,KAAKvB,MAAMiC,iDAIJ,IAAAC,EACwDX,KAAKvB,MAA7DjB,EADAmD,EACAnD,YAAaoD,EADbD,EACaC,eAAgBlD,EAD7BiD,EAC6BjD,OAAQC,EADrCgD,EACqChD,UAAWC,EADhD+C,EACgD/C,MACjDiD,EAAenD,EAAOoD,OAAO,SAAAhD,GAAqB,IAAnBkB,EAAmBlB,EAAnBkB,KAAmBlB,EAAbmB,MAAanB,EAANiB,GACjD,OAAOC,EAAK+B,cAAcC,SAASxD,EAAYuD,iBAEhD,OAAQpD,EAENM,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,eAEAH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,MAChBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,eACAH,EAAAC,EAAAC,cAAC8C,EAAD,CAAYjD,aAAc4C,IACxBhD,EAAD,GAAAwB,OAEGxB,GAEHK,EAAAC,EAAAC,cAAC+C,EAAD,KACCjD,EAAAC,EAAAC,cAACgD,EAAD,KACClD,EAAAC,EAAAC,cAACiD,EAAD,CAAU7B,MAAOsB,cAzBNL,cAiCHa,cAhDS,SAAAjB,GACvB,MAAM,CACL5C,YAAa4C,EAAMkB,aAAa9D,YAChCE,OAAQ0C,EAAMmB,YAAY7D,OAC1BC,UAAWyC,EAAMmB,YAAY5D,UAC7BC,MAAOwC,EAAMmB,YAAY3D,QAGA,SAAA4D,GAC1B,MAAM,CACLZ,eAAgB,SAAAa,GAAK,OAAID,ECdc,CACxClD,KCNkC,sBDOlCoD,QDYkDD,EAAME,OAAOC,SAC9DlB,cAAe,kBAAMc,ECXQ,SAACA,GAC/BA,EAAS,CAAClD,KCRyB,yBDSnCuD,MAAM,8CACJC,KAAK,SAAAC,GAAQ,OAAGA,EAASC,SACzBF,KAAK,SAAAG,GAAI,OAAGT,EAAS,CAAClD,KCVW,uBDUiBoD,QAASO,MAC3DC,MAAM,SAAAtE,GAAK,OAAG4D,EAAS,CAAClD,KCVM,oBDUmBoD,QAAS9D,WD2C9CyD,CAA6CZ,GG7CtD0B,SAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTZ,KAAK,SAAAiB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB7C,QACfwC,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,gHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,UAO5Bb,MAAM,SAAAtE,GACLyF,QAAQzF,MAAM,4CAA6CA,eCpF3D6F,EAASC,yBACTC,EAAYC,YAAgB,CAACtC,aVJP,WAAwC,IAAvClB,EAAuCyD,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAjCtG,EAAoByG,EAAaH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAN,GAC7D,OAAQG,EAAO1F,MACd,IQXiC,sBRYhC,OAAOwB,OAAOmE,OAAO,GAAG7D,EAAM,CAAC5C,YAAawG,EAAOtC,UACpD,QACC,OAAOtB,IUDsCmB,YVWrB,WAAwC,IAAvCnB,EAAuCyD,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAjCpG,EAAoBuG,EAAaH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAN,GAC5D,OAAQG,EAAO1F,MACd,IQxBkC,uBRyBjC,OAAOwB,OAAOmE,OAAO,GAAG7D,EAAM,CAACzC,WAAU,IAC1C,IQzBkC,uBR0BjC,OAAOmC,OAAOmE,OAAO,GAAG7D,EAAM,CAACzC,WAAU,EAAOD,OAAQsG,EAAOtC,UAChE,IQ1B+B,oBR2B9B,OAAO5B,OAAOmE,OAAO,GAAG7D,EAAM,CAACzC,WAAU,EAAOC,MAAOoG,EAAOtC,UAC/D,QACC,OAAOtB,MUnBJ8D,EAAQC,YAAYR,EAAaS,YAAgBC,IAAiBZ,IAExEa,IAASC,OAAOtG,EAAAC,EAAAC,cAACqG,EAAA,EAAD,CAAUN,MAAOA,GAC3BjG,EAAAC,EAAAC,cAACsG,EAAD,OACaC,SAASC,eAAe,SDIpC,SAAkBhC,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIgC,IAAIC,eAAwBxC,OAAOC,SAASwC,MACpDC,SAAW1C,OAAOC,SAASyC,OAIvC,OAGF1C,OAAO2C,iBAAiB,OAAQ,WAC9B,IAAMtC,EAAK,GAAAtD,OAAMyF,eAAN,sBAEP1C,GAgEV,SAAiCO,EAAOC,GAEtCd,MAAMa,GACHZ,KAAK,SAAAC,GAEJ,IAAMkD,EAAclD,EAASmD,QAAQC,IAAI,gBAEnB,MAApBpD,EAASqD,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5CzC,UAAUC,cAAcyC,MAAMxD,KAAK,SAAAiB,GACjCA,EAAawC,aAAazD,KAAK,WAC7BO,OAAOC,SAASkD,aAKpB/C,EAAgBC,EAAOC,KAG1BT,MAAM,WACLmB,QAAQC,IACN,mEArFAmC,CAAwB/C,EAAOC,GAI/BC,UAAUC,cAAcyC,MAAMxD,KAAK,WACjCuB,QAAQC,IACN,+GAMJb,EAAgBC,EAAOC,MC3B/BE","file":"static/js/main.230daf8d.chunk.js","sourcesContent":["import { CHANGE_SEARCH_FIELD,\r\n\t\t\tFETCH_ROBOTS_PENDING,\r\n\t\t\tFETCH_ROBOTS_SUCCESS,\r\n\t\t\tFETCH_ROBOTS_FAIL } from './constants.js'\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) =>{\r\n\tswitch (action.type){\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({},state,{searchField: action.payload});\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nconst initialStateRobots = {\r\n\trobots: [],\r\n\tisPending: true,\r\n\terror: ''\r\n}\r\n\r\nexport const fetchRobots = (state=initialStateRobots, action={}) =>{\r\n\tswitch (action.type){\r\n\t\tcase FETCH_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({},state,{isPending:true});\r\n\t\tcase FETCH_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({},state,{isPending:false, robots: action.payload});\r\n\t\tcase FETCH_ROBOTS_FAIL:\r\n\t\t\treturn Object.assign({},state,{isPending:false, error: action.payload});\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","import React from 'react';\r\n\r\nconst SearchBox=({searchfield, searchchange})=>{\r\n\treturn(\r\n\t\t\t<div className='pa2'>\r\n\t\t\t\t<input \r\n\t\t\t\tclassName='pa3 ba b--green bg-lightestblue'\r\n\t\t\t\tonChange={searchchange} \r\n\t\t\t\ttype='Search' \r\n\t\t\t\tplaceholder='Search Kittens' />\r\n\t\t\t</div>\r\n\t);\r\n}\r\nexport default SearchBox;","import React from 'react';\r\nconst Scroll = (props) =>  {\r\n  return (\r\n    <div style={{ overflowY:'scroll' ,height: '540px' }} >\r\n      {props.children}\r\n    \t\r\n    </div> \r\n  ); \r\n};\r\nexport default Scroll;","import React from 'react';\r\n\r\nconst Card=({id, name, email})=>{\r\n\treturn(\r\n\t\t<div className=' tc bg-silver dib br3 pa3 ma2 bw2 grow shadow-5'>\r\n\t\t\t<img alt= 'robot ' src={`https://robohash.org/${id}?set=set4&size=130x130`} />\r\n\t\t\t<div >\r\n\t\t\t \t<h4>{name}</h4>\r\n\t\t\t \t<p style={{fontSize:'13px'}}>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList=({robos})=>{\r\n\treturn(\r\n\t\t<div>\r\n\t\t{\r\n\t\t\trobos.map(({id, name, email})=>{\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Card \r\n\t\t\t\t\t\tkey={id} \r\n\t\t\t\t\t\tid={id} \r\n\t\t\t\t\t\tname={name} \r\n\t\t\t\t\t\temail={email}  \r\n\t\t\t\t\t/>\r\n\t\t\t\t);\t\r\n\t\t\t})\r\n\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;\r\n\r\n","import React, {Component} from 'react'\r\n\r\nclass ErrorBoundary extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state={\r\n\t\t\thasError: false,\r\n\t\t}\r\n\t}\r\n\tcomponentDidCatch(error,info){\r\n\t\tthis.setState({hasError: true})\r\n\t}\r\n\trender(){\r\n\t\tif (this.state.hasError){\r\n\t\t\treturn(<h1>Oops.Error</h1>);\r\n\t\t}\r\n\t\treturn this.props.children;\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport CardList from '../components/CardList';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css'\r\nimport {setSearchField, fetchRobots} from '../actions.js'\r\n\r\nconst mapStateToProps = state => {\r\n\treturn{\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.fetchRobots.robots,\r\n\t\tisPending: state.fetchRobots.isPending,\r\n\t\terror: state.fetchRobots.error\r\n\t}\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n\treturn{\r\n\t\tonSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n\t\tonFetchRobots: () => dispatch(fetchRobots())\r\n\t}\r\n}\r\n\r\nclass App extends Component{\r\n\t\r\n\tcomponentDidMount(){\r\n\t\tthis.props.onFetchRobots();\r\n\t}\r\n\r\n\r\n\trender(){\r\n\t\tconst {searchField, onSearchChange, robots, isPending, error}= this.props; \r\n\t\tconst filteredrobots=robots.filter(({name, email, id})=>{\r\n\t\t\treturn name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t}); \r\n\t\treturn (isPending)\r\n\t\t\t?\r\n\t\t\t <h1 className='tc'>LOADING ...</h1>\r\n\t\t\t:\r\n\t\t\t(<div className= 'tc'>\r\n\t\t\t\t<h1 className='tc'>HashKittens</h1>\r\n\t\t\t\t<SearchBox  searchchange={onSearchChange}/>\r\n\t\t\t\t{(error)\r\n\t\t\t\t\t?\r\n\t\t\t\t\t`${error}`\r\n\t\t\t\t\t:\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t\t<CardList robos={filteredrobots} />\r\n\t\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t}\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD,\r\n\t\t\tFETCH_ROBOTS_PENDING,\r\n\t\t\tFETCH_ROBOTS_SUCCESS,\r\n\t\t\tFETCH_ROBOTS_FAIL } from './constants.js'\r\n\r\nexport const setSearchField = (text) => ({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n})\r\nexport const fetchRobots=() => (dispatch) => {\r\n\tdispatch({type: FETCH_ROBOTS_PENDING});\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response=> response.json())\r\n\t\t.then(data=> dispatch({type: FETCH_ROBOTS_SUCCESS, payload: data}))\r\n\t\t.catch(error=> dispatch({type: FETCH_ROBOTS_FAIL, payload: error}))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const FETCH_ROBOTS_PENDING = 'FETCH_ROBOTS_PENDING';\r\nexport const FETCH_ROBOTS_SUCCESS = 'FETCH_ROBOTS_SUCCESS';\r\nexport const FETCH_ROBOTS_FAIL = 'FETCH_ROBOTS_FAIL';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {searchRobots, fetchRobots } from './reducers';\nimport {createLogger} from 'redux-logger'; \nimport thunkMiddleware from 'redux-thunk';\nimport App from './containers/App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nconst logger = createLogger();\nconst rootReducer=combineReducers({searchRobots,fetchRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(<Provider store={store}>\n\t\t\t\t\t\t<App />\n\t\t\t\t\t </Provider>, document.getElementById('root'));\n \n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}